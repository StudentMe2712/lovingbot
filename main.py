import sys
import asyncio
import nest_asyncio
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import PERSONALIZATION, NOTIFICATION_SETTINGS, TELEGRAM_BOT_TOKEN, WEATHER_API_KEY
from modules.greetings import GreetingModule
from modules.games import GameModule
from modules.memories import MemoryModule
from modules.music import MusicModule
from modules.dates import DateModule
from modules.reminders import RemindersModule
from modules.mood_stats import MoodStatsModule
from modules.memory_archive import MemoryArchiveModule
from modules.date_ideas_advanced import DateIdeasAdvancedModule
from modules.weather import WeatherModule, CITIES
from database.db_manager import DatabaseManager
import logging
import os
from modules.channel_music import send_channel_music
from utils.user_management import Data, UserStatus
from utils.logger import setup_logger
from modules.commands.start import get_start_conv_handler
from modules.commands.help import help_command
from modules.commands.game import get_game_conv_handler, game_stats, EXTRA_COMMANDS
from modules.commands.question import question_command
from modules.commands.memory import memory_command
from modules.commands.add_memory import add_memory_command
from modules.commands.music import music_command, deezer_music_command, forward_audio_command, save_audio_file_id, send_audio_command
from modules.commands.date_idea import date_idea_command
from modules.commands.mood import mood_command
from modules.commands.compliment import compliment_command
from modules.commands.stats import stats_command
from modules.commands.reminder_add import reminder_add_command
from modules.commands.reminder_remove import reminder_remove_command
from modules.commands.mood_stats import mood_stats_command
from modules.commands.memory_archive import memory_archive_command
from modules.commands.date_idea_advanced import get_conv_handler
from utils.db_async import init_db
from modules.commands.draw import draw_command

if sys.platform.startswith("win") and sys.version_info >= (3, 8):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

async def main():
    logger = setup_logger("main")
    db = DatabaseManager()
    greeting_module = GreetingModule(db)
    game_module = GameModule(db)
    memory_module = MemoryModule(db)
    music_module = MusicModule(db)
    date_module = DateModule(db)
    reminders_module = RemindersModule(db, None)
    mood_stats_module = MoodStatsModule(db)
    memory_archive_module = MemoryArchiveModule(db)
    date_ideas_advanced_module = DateIdeasAdvancedModule(weather_api_key=WEATHER_API_KEY)
    weather_module = WeatherModule(api_key=WEATHER_API_KEY)

    RUS_COMMANDS = {
        "–ò–≥—Ä–∞ üé≤": game_module.start_game,
        "–ú—É–∑—ã–∫–∞ üéµ": music_module.send_music_recommendation,
        "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì∏": memory_module.send_random_memory,
        "–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ûïüì∏": memory_module.add_memory,
        "–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è üí°": date_module.send_date_idea,
        "–í–æ–ø—Ä–æ—Å –¥–Ω—è ‚ùì": greeting_module.send_daily_question,
        "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä": greeting_module.ask_mood,
        "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç üí¨": greeting_module.send_compliment,
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä": game_module.send_stats,
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞": reminders_module.list_reminders,
        "–ê—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π üóÇÔ∏è": memory_archive_command,
        "–†–∞—Å—à–∏—Ä. —Å–≤–∏–¥–∞–Ω–∏–µ üó∫Ô∏è": date_ideas_advanced_module.date_idea_advanced,
        "Deezer –º—É–∑—ã–∫–∞ üü¶": music_module.send_deezer_music,
        "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": None
    }

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    scheduler = AsyncIOScheduler()  # –±–µ–∑ event_loop!
    reminders_module.scheduler = scheduler  # –ø–µ—Ä–µ–¥–∞—ë–º scheduler –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è

    # –°–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ /start
    app.add_handler(get_start_conv_handler())
    app.add_handler(get_game_conv_handler())
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (MessageHandler(filters.TEXT & ~filters.COMMAND)) –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # --- –ü–æ–≥–æ–¥–∞: FSM ---
    async def handle_weather_city(update, context):
        logger.info(f"[–ü–æ–≥–æ–¥–∞] handle_weather_city: user_id={update.effective_user.id if update.effective_user else 'unknown'}")
        keyboard = [[city] for city in CITIES]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        context.user_data['weather_state'] = 'choose_city'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

    async def handle_weather_fsm(update, context):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel
        if update.message.text.strip().lower() == '/cancel':
            context.user_data['weather_state'] = None
            await update.message.reply_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≥–æ–¥—ã.",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        state = context.user_data.get('weather_state')
        if state == 'choose_city':
            city = update.message.text.strip()
            reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
            if city not in CITIES:
                await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥: {city}", reply_markup=reply_markup)
                return
            try:
                result = await weather_module.get_weather(city)
                await update.message.reply_text(result, reply_markup=reply_markup)
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}", reply_markup=reply_markup)
            context.user_data['weather_state'] = None
            return
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–≥–æ–¥–∞ ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–≥—Ä–∞)
        await game_module.answer_game(update, context)

    # --- END FSM ---

    # --- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: FSM ---
    async def handle_mood_fsm(update, context):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel
        if update.message.text.strip().lower() == '/cancel':
            context.user_data['mood_state'] = None
            await update.message.reply_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        state = context.user_data.get('mood_state')
        if state == 'ask_mood':
            try:
                mood = int(update.message.text)
            except Exception:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
                return
            user_id = update.effective_user.id
            from datetime import datetime
            db.add_mood(user_id, mood, datetime.now().isoformat())
            await update.message.reply_text(f"–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ({mood}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
            context.user_data['mood_state'] = None
            return
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
        await handle_weather_fsm(update, context)

    # --- END FSM ---

    # –í handle_rus_menu –¥–æ–±–∞–≤–ª—è—é –≤—ã–∑–æ–≤ FSM
    async def handle_rus_menu(update, context):
        logger.info(f"handle_rus_menu: {update.message.text}")
        if update.message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await get_start_conv_handler()(update, context)
            return
        if update.message.text == "–ü–æ–≥–æ–¥–∞ ‚òÄÔ∏è":
            await handle_weather_city(update, context)
            return
        handler = RUS_COMMANDS.get(update.message.text)
        if handler:
            await handler(update, context)
        else:
            logger.info(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è: {update.message.text}")

    # –ó–∞–º–µ–Ω—è—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π MessageHandler (filters.TEXT & ~filters.COMMAND) –Ω–∞ FSM-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weather_fsm))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–≤–∏–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    async def handle_date_type_choice(update, context):
        date_types = ["–¥–æ–º", "—É–ª–∏—Ü–∞", "–∫–∞—Ñ–µ"]
        if update.message.text.lower() in date_types:
            # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ—é
            await date_ideas_advanced_module.date_idea_advanced(update, context)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            reply_markup = ReplyKeyboardMarkup([
                ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ], resize_keyboard=True)
            await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=reply_markup)

    app.add_handler(CommandHandler("memory", memory_command))
    app.add_handler(CommandHandler("add_memory", add_memory_command))
    app.add_handler(MessageHandler(filters.PHOTO, memory_module.add_photo_memory))
    app.add_handler(MessageHandler(filters.VIDEO, memory_module.add_video_memory))
    app.add_handler(MessageHandler(filters.VOICE, memory_module.add_voice_memory))
    app.add_handler(CommandHandler("music", music_command))
    app.add_handler(CommandHandler("deezer_music", deezer_music_command))
    app.add_handler(CommandHandler("question", question_command))
    app.add_handler(CommandHandler("date_idea", date_idea_command))
    app.add_handler(CommandHandler("mood", mood_command))
    app.add_handler(MessageHandler(filters.Regex(r'^[1-9]$|^10$'), greeting_module.save_mood))
    app.add_handler(CommandHandler("compliment", compliment_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("reminder_add", reminder_add_command))
    app.add_handler(CommandHandler("reminders", reminders_module.list_reminders))
    app.add_handler(CommandHandler("reminder_remove", reminder_remove_command))
    app.add_handler(CommandHandler("mood_stats", mood_stats_command))
    app.add_handler(CommandHandler("memory_archive", memory_archive_command))
    app.add_handler(get_conv_handler())
    app.add_handler(MessageHandler(filters.Regex(r"^–¥–æ–º$|^—É–ª–∏—Ü–∞$|^–∫–∞—Ñ–µ$"), handle_date_type_choice), group=0)
    app.add_handler(MessageHandler(filters.Regex(r"^–ò–≥—Ä–∞.*$|^–ú—É–∑—ã–∫–∞.*$|^–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*$|^–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*$|^–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è.*$|^–í–æ–ø—Ä–æ—Å –¥–Ω—è.*$|^–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.*$|^–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç.*$|^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.*$|^–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.*$|^–ê—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.*$|^–†–∞—Å—à–∏—Ä. —Å–≤–∏–¥–∞–Ω–∏–µ.*$|^Deezer –º—É–∑—ã–∫–∞.*$|^–ü–æ–≥–æ–¥–∞.*$|^–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_rus_menu), group=1)
    app.add_handler(CommandHandler("game_stats", game_stats))
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    for cmd in EXTRA_COMMANDS:
        app.add_handler(cmd)
    app.add_handler(CommandHandler("forward_audio", forward_audio_command))
    app.add_handler(CommandHandler("save_audio_file_id", save_audio_file_id))
    app.add_handler(CommandHandler("send_audio", send_audio_command))
    app.add_handler(CommandHandler("draw", draw_command))

    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (JobQueue —á–µ—Ä–µ–∑ APScheduler)
    scheduler.add_job(greeting_module.send_morning_greeting, 'cron', hour=9, minute=0)
    scheduler.add_job(music_module.send_music_recommendation, 'cron', hour=18, minute=0, args=[None, None])
    scheduler.add_job(greeting_module.send_daily_question, 'cron', hour=12, minute=0, args=[None, None])
    scheduler.add_job(greeting_module.send_daily_question, 'cron', hour=18, minute=0, args=[None, None])
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏

    # –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    MAIN_MENU = [
        ["–ò–≥—Ä–∞ üé≤", "–ú—É–∑—ã–∫–∞ üéµ", "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì∏"],
        ["–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ûïüì∏", "–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è üí°", "–í–æ–ø—Ä–æ—Å –¥–Ω—è ‚ùì"],
        ["–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä", "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç üí¨", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"],
        ["–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞", "–ê—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π üóÇÔ∏è", "–†–∞—Å—à–∏—Ä. —Å–≤–∏–¥–∞–Ω–∏–µ üó∫Ô∏è"],
        ["Deezer –º—É–∑—ã–∫–∞ üü¶", "–ü–æ–≥–æ–¥–∞ ‚òÄÔ∏è"]
    ]

    await init_db()

    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever() 