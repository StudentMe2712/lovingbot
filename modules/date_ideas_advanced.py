from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from modules.weather import WeatherModule
import random
import asyncio
from typing import List, Dict, Any
import json
from utils.ollama_api import query_ollama
from utils.ollama_mode import get_ollama_mode
# from utils.groqapi_client import generate_text

IDEAS = {
    '–¥–æ–º': [
        '–£—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
        '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω –≤–º–µ—Å—Ç–µ',
        '–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã',
        '–°–æ–≤–º–µ—Å—Ç–Ω—ã–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä'
    ],
    '—É–ª–∏—Ü–∞': [
        '–ü—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ',
        '–ü–∏–∫–Ω–∏–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ',
        '–ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö',
        '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –Ω–∞ —É–ª–∏—Ü–µ'
    ],
    '–∫–∞—Ñ–µ': [
        '–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –∫–∞—Ñ–µ',
        '–ó–∞–≤—Ç—Ä–∞–∫ –≤–Ω–µ –¥–æ–º–∞',
        '–í–µ—á–µ—Ä –≤ –∫–æ—Ñ–µ–π–Ω–µ —Å –Ω–∞—Å—Ç–æ–ª–∫–∞–º–∏'
    ]
}

MAIN_MENU = [
    ["–ò–≥—Ä–∞ üé≤", "–ú—É–∑—ã–∫–∞ üéµ", "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì∏"],
    ["–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ûïüì∏", "–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è üí°", "–í–æ–ø—Ä–æ—Å –¥–Ω—è ‚ùì"],
    ["–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä", "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç üí¨", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"],
    ["–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚è∞", "–ê—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π üóÇÔ∏è", "–†–∞—Å—à–∏—Ä. —Å–≤–∏–¥–∞–Ω–∏–µ üó∫Ô∏è"],
    ["Deezer –º—É–∑—ã–∫–∞ üü¶", "–ü–æ–≥–æ–¥–∞ ‚òÄÔ∏è"]
]

class DateIdeasAdvancedModule:
    def __init__(self, weather_api_key: str = None):
        self.weather_api_key = weather_api_key
        self.weather = WeatherModule(weather_api_key) if weather_api_key else None

    async def date_idea_advanced(self, update: Update, context: ContextTypes.DEFAULT_TYPE, idea_type=None):
        if not idea_type:
            keyboard = [["–¥–æ–º", "—É–ª–∏—Ü–∞", "–∫–∞—Ñ–µ"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–≤–∏–¥–∞–Ω–∏—è: –¥–æ–º, —É–ª–∏—Ü–∞, –∫–∞—Ñ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /date_idea_advanced —É–ª–∏—Ü–∞)",
                reply_markup=reply_markup
            )
            return
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∏ —á–µ—Ä–µ–∑ LLM
        if context:
            mode, submode = get_ollama_mode(context)
        else:
            mode, submode = "general", "standard"
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏–¥–µ—é –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è –≤ —Å—Ç–∏–ª–µ: {idea_type}. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏.\n–†–µ–∂–∏–º: {mode}\n–ü–æ–¥—Ä–µ–∂–∏–º: {submode}"
        result = await query_ollama(prompt, model="llama3")
        # –ü–æ–≥–æ–¥–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω '—É–ª–∏—Ü–∞')
        weather_info = ''
        city = None
        if idea_type == '—É–ª–∏—Ü–∞' and self.weather:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ context.user_data, –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(context, 'user_data') and 'city' in context.user_data:
                city = context.user_data['city']
            elif hasattr(update, 'callback_query') and update.callback_query:
                city = update.callback_query.data
            elif hasattr(update, 'message') and update.message:
                city = update.message.text.strip()
            if not city or city not in self.weather.CITIES:
                city = '–ê—Å—Ç–∞–Ω–∞'
            weather_info = await self.weather.get_weather(city)
        if result:
            msg = f"–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è: {result}\n"
            await update.message.reply_text(msg)
        else:
            idea = random.choice(IDEAS[idea_type])
            msg = f"–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è: {idea}\n"
            await update.message.reply_text(msg)
        if weather_info:
            if isinstance(weather_info, tuple):
                weather_text, weather_image = weather_info
                await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞: {weather_text}")
                if weather_image:
                    await update.message.reply_photo(weather_image, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø–æ–≥–æ–¥–µ!")
            else:
                await update.message.reply_text(f"–ü–æ–≥–æ–¥–∞: {weather_info}")
        return None 