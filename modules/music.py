import random
from utils.ollama_api import query_ollama
from utils.ollama_mode import get_ollama_mode
# from utils.groqapi_client import generate_text
import aiohttp

class MusicModule:
    def __init__(self, db):
        self.db = db
        self.tracks = [
            ("Imagine Dragons - Believer", "üî• –î–ª—è –∑–∞—Ä—è–¥–∞ —ç–Ω–µ—Ä–≥–∏–µ–π –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!", "https://youtu.be/7wtfhZwyrcc"),
            ("The Weeknd - Blinding Lights", "‚ú® –î–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!", "https://youtu.be/4NRXx6U8ABQ"),
            ("Ed Sheeran - Shape of You", "üíÉ –î–ª—è —Ç–∞–Ω—Ü–µ–≤ –≤–¥–≤–æ—ë–º!", "https://youtu.be/JGwWNGJdvx8"),
            ("Coldplay - Viva La Vida", "üåÖ –î–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!", "https://youtu.be/dvgZkm1xWPE"),
            ("Maroon 5 - Memories", "üé∂ –î–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π!", "https://youtu.be/SlPhMPnQ58k"),
        ]

    async def send_music_recommendation(self, update, context):
        if context:
            mode, submode = get_ollama_mode(context)
        else:
            mode, submode = "general", "standard"
        prompt = f"–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–µ—Å–Ω—é (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –Ω–∞–∑–≤–∞–Ω–∏–µ) –∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç. –§–æ—Ä–º–∞—Ç: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ.\n–†–µ–∂–∏–º: {mode}\n–ü–æ–¥—Ä–µ–∂–∏–º: {submode}"
        result = await query_ollama(prompt)
        if result:
            await update.message.reply_text(f"üéµ {result}")
            return
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        track, mood, link = random.choice(self.tracks)
        text = f"üéµ {track}\nüí¨ {mood}\nüîó {link}"
        await update.message.reply_text(text) 

    async def send_deezer_music(self, update, context):
        url = "https://api.deezer.com/chart"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    tracks = data.get("tracks", {}).get("data", [])
                    if not tracks:
                        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-—Ç—Ä–µ–∫–∏ Deezer.")
                        return
                    import random
                    track = random.choice(tracks)
                    title = track.get("title")
                    artist = track.get("artist", {}).get("name")
                    link = track.get("link")
                    msg = f"üéµ {title} ‚Äî {artist}\nüîó {link}"
                    await update.message.reply_text(msg)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ Deezer: {e}") 

async def get_music_recommendation(prompt: str, context=None) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç Groq API (–∏–ª–∏ Ollama).
    """
    if context:
        mode, submode = get_ollama_mode(context)
    else:
        mode, submode = "general", "standard"
    full_prompt = f"–ü–æ—Å–æ–≤–µ—Ç—É–π 1 –ø–µ—Å–Ω—é –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É: '{prompt}'. –í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.\n–†–µ–∂–∏–º: {mode}\n–ü–æ–¥—Ä–µ–∂–∏–º: {submode}"
    recommendation = await query_ollama(full_prompt)
    return recommendation 