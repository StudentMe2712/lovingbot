class MemoryModule:
    def __init__(self, db):
        self.db = db

    async def add_memory(self, update, context):
        if context.args:
            text = " ".join(context.args)
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏: —Ç–µ–∫—Å—Ç; #—Ç–µ–≥–∏; —ç–º–æ—Ü–∏—è
            # –ü—Ä–∏–º–µ—Ä: "–°–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! #–æ—Ç–¥—ã—Ö, #–ª–µ—Ç–æ —Ä–∞–¥–æ—Å—Ç—å"
            tags = None
            emotion = None
            if ';' in text:
                parts = text.split(';')
                content = parts[0].strip()
                if len(parts) > 1:
                    tags = parts[1].replace('#', '').strip()
                if len(parts) > 2:
                    emotion = parts[2].strip()
            else:
                content = text
            self.db.add_memory(type="text", content=content, tags=tags, emotion=emotion)
            await update.message.reply_text("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!" + (f"\n–¢–µ–≥–∏: {tags}" if tags else "") + (f"\n–≠–º–æ—Ü–∏—è: {emotion}" if emotion else ""))
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –∏ —ç–º–æ—Ü–∏—é —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π: \n–ü—Ä–∏–º–µ—Ä: –°–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!; #–æ—Ç–¥—ã—Ö, #–ª–µ—Ç–æ; —Ä–∞–¥–æ—Å—Ç—å")

    async def add_photo_memory(self, update, context):
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            caption = update.message.caption or "–§–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            tags = None
            emotion = None
            if caption and ';' in caption:
                parts = caption.split(';')
                description = parts[0].strip()
                if len(parts) > 1:
                    tags = parts[1].replace('#', '').strip()
                if len(parts) > 2:
                    emotion = parts[2].strip()
            else:
                description = caption
            self.db.add_memory(type="photo", content="", file_id=file_id, description=description, tags=tags, emotion=emotion)
            await update.message.reply_text("–§–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!" + (f"\n–¢–µ–≥–∏: {tags}" if tags else "") + (f"\n–≠–º–æ—Ü–∏—è: {emotion}" if emotion else ""))
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –∏ —ç–º–æ—Ü–∏—é —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ.")

    async def add_video_memory(self, update, context):
        if update.message.video:
            file_id = update.message.video.file_id
            caption = update.message.caption or "–í–∏–¥–µ–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            tags = None
            emotion = None
            if caption and ';' in caption:
                parts = caption.split(';')
                description = parts[0].strip()
                if len(parts) > 1:
                    tags = parts[1].replace('#', '').strip()
                if len(parts) > 2:
                    emotion = parts[2].strip()
            else:
                description = caption
            self.db.add_memory(type="video", content="", file_id=file_id, description=description, tags=tags, emotion=emotion)
            await update.message.reply_text("–í–∏–¥–µ–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!" + (f"\n–¢–µ–≥–∏: {tags}" if tags else "") + (f"\n–≠–º–æ—Ü–∏—è: {emotion}" if emotion else ""))
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –∏ —ç–º–æ—Ü–∏—é —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ.")

    async def add_voice_memory(self, update, context):
        if update.message.voice:
            file_id = update.message.voice.file_id
            # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏—è —á–µ—Ä–µ–∑ caption
            emotion = update.message.caption.strip() if update.message.caption else None
            self.db.add_memory(type="voice", content="", file_id=file_id, description="–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ", emotion=emotion)
            await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!" + (f"\n–≠–º–æ—Ü–∏—è: {emotion}" if emotion else ""))
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏—é –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É.")

    async def send_random_memory(self, update, context):
        memory = self.db.get_random_memory()
        if memory:
            _, date, type_, content, file_id, description = memory
            if type_ == "photo" and file_id:
                await update.message.reply_photo(photo=file_id, caption=f"üì∏ {description or '–§–æ—Ç–æ-–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ'}\n({date})")
            elif type_ == "voice" and file_id:
                await update.message.reply_voice(voice=file_id, caption=f"üé§ {description or '–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ'}\n({date})")
            else:
                text = f"üì∏ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {date}: {description or content}"
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ!") 