import random
from utils.db_async import get_random_question_for_user, add_question
from telegram.ext import ConversationHandler
from utils.hf_image_client import generate_image

class GameModule:
    def __init__(self, db=None):
        self.current = {}
        self.db = db

    async def start_game(self, update, context):
        user_id = update.effective_user.id
        q = await get_random_question_for_user(user_id)
        if not q:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return
        self.current[user_id] = {"q": q.question, "a": q.answer}
        await update.message.reply_text(q.question)
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É
        image_bytes = await generate_image(q.question)
        if image_bytes:
            await update.message.reply_photo(image_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–ø—Ä–æ—Å—É!")

    async def answer_game(self, update, context):
        user_id = update.effective_user.id
        if user_id not in self.current:
            return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        answer = update.message.text.strip().lower()
        correct = self.current[user_id]["a"].lower()
        if answer == correct:
            await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª üèÜ")
        else:
            await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
        del self.current[user_id]

    async def add_question_input(self, update, context):
        question_text = update.message.text.strip()
        context.user_data['temp_question'] = question_text
        context.user_data['add_question_state'] = 1
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        return 1

    async def add_answer_input(self, update, context):
        user_id = update.effective_user.id
        question = context.user_data.pop('temp_question', None)
        answer = update.message.text.strip().lower()
        if not question:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è /add_question_start.")
            context.user_data.pop('add_question_state', None)
            return -1
        await add_question(question, answer, user_id)
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –°–ø–∞—Å–∏–±–æ!")
        context.user_data.pop('add_question_state', None)
        return -1

    async def send_stats(self, update, context):
        avg, count = self.db.get_mood_stats()
        game_stats = self.db.get_game_stats()
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        if count:
            text += f"\n–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {avg:.2f} (–æ—Ç–º–µ—Ç–æ–∫: {count})"
        else:
            text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."
        if game_stats:
            text += "\n\n–ò–≥—Ä—ã:"
            for game_type, score in game_stats:
                text += f"\n- {game_type}: {score} –æ—á–∫–æ–≤"
        else:
            text += "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–≥—Ä–∞–º."
        await update.message.reply_text(text)

    async def add_question_start(self, update, context):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:")
        return 0  # ADD_QUESTION_PROMPT

    async def cancel_add_question(self, update, context):
        context.user_data.pop('temp_question', None)
        context.user_data.pop('add_question_state', None)
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END 