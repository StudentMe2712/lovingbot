from database.db_manager import DatabaseManager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import ContextTypes
from dateutil import parser as date_parser
import datetime

class RemindersModule:
    def __init__(self, db: DatabaseManager, scheduler: AsyncIOScheduler):
        self.db = db
        self.scheduler = scheduler

    async def add_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /reminder_add <–¥–∞—Ç–∞/–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>\n–ü—Ä–∏–º–µ—Ä: /reminder_add 2024-06-10 18:00 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ª—é–±–∏–º–æ–π")
            return
        try:
            remind_at = date_parser.parse(args[0] + (" " + args[1] if len(args) > 2 else ""))
            text = " ".join(args[2:]) if len(args) > 2 else args[1]
        except Exception:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 2024-06-10 18:00")
            return
        if remind_at < datetime.datetime.now():
            await update.message.reply_text("–î–∞—Ç–∞/–≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏!")
            return
        user_id = update.effective_user.id
        reminder_id = self.db.add_reminder(user_id, text, remind_at.isoformat())
        self.scheduler.add_job(self.send_reminder, 'date', run_date=remind_at, args=[update.effective_chat.id, text, reminder_id])
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {remind_at.strftime('%d.%m.%Y %H:%M')} ‚Äî {text}")

    async def send_reminder(self, chat_id, text, reminder_id):
        from telegram import Bot
        # context7: Application.get_instance() –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω
        # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å bot —á–µ—Ä–µ–∑ context, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã:
        # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ context.bot, –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        bot = Bot(token="BOT_TOKEN")
        await bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –ë–î
        self.db.remove_reminder(chat_id, reminder_id)

    async def list_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        reminders = self.db.get_reminders(user_id)
        if not reminders:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        msg = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for rid, text, dt in reminders:
            msg += f"#{rid}: {dt.replace('T', ' ')} ‚Äî {text}\n"
        await update.message.reply_text(msg)

    async def remove_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args or not args[0].isdigit():
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /reminder_remove <id>\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å id: /reminders")
            return
        user_id = update.effective_user.id
        reminder_id = int(args[0])
        self.db.remove_reminder(user_id, reminder_id)
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É–¥–∞–ª–µ–Ω–æ.") 