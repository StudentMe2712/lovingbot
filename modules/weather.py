import aiohttp
from datetime import datetime, timedelta
import logging

CITIES = ["–ê—Å—Ç–∞–Ω–∞", "–°–µ–º–µ–π"]

class WeatherModule:
    def __init__(self, api_key: str):
        self.api_key = api_key

    async def get_weather(self, city: str):
        logging.info(f"[WeatherModule] get_weather called for city: {city}")
        url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={self.api_key}&units=metric&lang=ru"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        text = await resp.text()
                        logging.error(f"Weather: –æ—à–∏–±–∫–∞ {resp.status}, –æ—Ç–≤–µ—Ç: {text}")
                        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ö–æ–¥: {resp.status}"
                    data = await resp.json()
                    now = datetime.now()
                    target_date = now.date()
                    forecast = None
                    min_diff = float('inf')
                    for item in data["list"]:
                        dt = datetime.fromtimestamp(item["dt"])
                        if dt.date() == target_date:
                            diff = abs((dt - now).total_seconds())
                            if diff < min_diff:
                                min_diff = diff
                                forecast = item
                    if not forecast and data["list"]:
                        forecast = data["list"][0]
                    if not forecast:
                        logging.error(f"Weather: –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
                        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."
                    temp = forecast['main']['temp']
                    feels = forecast['main'].get('feels_like', '-')
                    desc = forecast['weather'][0]['description']
                    icon = forecast['weather'][0].get('icon', '')
                    humidity = forecast['main'].get('humidity', '-')
                    wind = forecast['wind'].get('speed', '-')
                    clouds = forecast.get('clouds', {}).get('all', '-')
                    pressure = forecast['main'].get('pressure', '-')
                    dt_txt = forecast.get('dt_txt', '')
                    icon_url = f"https://openweathermap.org/img/wn/{icon}@2x.png" if icon else ''
                    emoji = "‚òÄÔ∏è" if "—è—Å–Ω–æ" in desc else ("üåßÔ∏è" if "–¥–æ–∂–¥" in desc else "‚òÅÔ∏è")
                    msg = (
                        f"{emoji} <b>{city}</b> <i>({dt_txt})</i>\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: <b>{desc}</b>\n"
                    )
                    if icon_url:
                        msg += f'<a href="{icon_url}">&#8205;</a>'
                    msg += (
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                        f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%\n"
                        f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞"
                    )
                    logging.info(f"[WeatherModule] get_weather result for {city}: {msg}")
                    return msg
        except aiohttp.ClientError as e:
            logging.exception(f"Weather: ClientError –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}"
        except Exception as e:
            logging.exception(f"Weather: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}" 