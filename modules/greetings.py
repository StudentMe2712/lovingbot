import random
from config import PERSONALIZATION
from utils.user_management import Data
from utils.groqapi_client import generate_text
# from utils.hf_image_client import generate_image

class GreetingModule:
    def __init__(self, db):
        self.db = db
        self.data = Data()
        self.questions = {
            "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è": [
                "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è?",
            ],
            "–ú–µ—á—Ç—ã": [
                "–ï—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ –º–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–±—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ?",
            ],
            "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è": [
                "–ò–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –¥–ª—è –≤–∞—Å –¥–≤–æ–∏—Ö - —ç—Ç–æ...?",
            ],
            "–ó–∞–±–∞–≤–Ω—ã–µ": [
                "–ï—Å–ª–∏ –±—ã –ö–∞–º–∏–ª–ª–∞ –±—ã–ª–∞ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º, –∫–∞–∫–∞—è —É –Ω–µ—ë –±—ã–ª–∞ –±—ã —Å—É–ø–µ—Ä—Å–∏–ª–∞?",
            ],
            "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–µ": [
                "–ß—Ç–æ –≤ –î–∞—É–ª–µ—Ç–µ –ø–æ–∫–æ—Ä–∏–ª–æ —Ç–µ–±—è —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞, –ö–∞–º–∏–ª–ª–∞?",
            ],
            "–ü–ª–∞–Ω—ã": [
                "–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–µ—Ö–∞—Ç—å –≤–º–µ—Å—Ç–µ —ç—Ç–∏–º –ª–µ—Ç–æ–º?",
            ],
        }
        self.compliments = [
            "–í—ã ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞! üíñ",
            "–í–∞—à–∞ –ø–∞—Ä–∞ ‚Äî –ø—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç–æ—è—â–µ–π –ª—é–±–≤–∏! üíë",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –≤–∞–º–∏ ‚Äî –ø—Ä–∞–∑–¥–Ω–∏–∫! üéâ",
            "–í—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ—Ç –º–∏—Ä —Ç–µ–ø–ª–µ–µ! ‚òÄÔ∏è",
            "–í–∞—à–∞ –∑–∞–±–æ—Ç–∞ –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ ‚Äî –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞! üå∏",
            "–í—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –º–µ—á—Ç—ã! ‚ú®",
        ]

    async def send_morning_greeting(self, update=None, context=None):
        chat_id = None
        if update and update.effective_chat:
            chat_id = update.effective_chat.id
        elif context and hasattr(context, 'job') and hasattr(context.job, 'chat_id'):
            chat_id = context.job.chat_id
        else:
            # fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º id –≥—Ä—É–ø–ø—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
            chat_id = -1002123456789  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π id –≥—Ä—É–ø–ø—ã

        text = (
            f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {PERSONALIZATION['names'][0]} –∏ {PERSONALIZATION['names'][1]}! "
            "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ç–µ–ø–ª–∞, —Å–∫–æ–ª—å–∫–æ –≤—ã –¥–∞—Ä–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É üíï"
        )
        if context and hasattr(context, 'bot'):
            await context.bot.send_message(chat_id=chat_id, text=text)

    async def send_daily_question(self, update=None, context=None):
        chat_id = None
        if update and update.effective_chat:
            chat_id = update.effective_chat.id
        elif context and hasattr(context, 'job') and hasattr(context.job, 'chat_id'):
            chat_id = context.job.chat_id
        else:
            chat_id = -1002123456789  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π id –≥—Ä—É–ø–ø—ã
        prompt = "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–∞—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –ª—É—á—à–µ —É–∑–Ω–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏."
        result = await generate_text(prompt, max_tokens=60)
        if result:
            text = f"‚ùì –í–æ–ø—Ä–æ—Å –¥–Ω—è: {result}"
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if context and hasattr(context, 'bot'):
                await context.bot.send_message(chat_id=chat_id, text=text)
            elif update and update.message:
                await update.message.reply_text(text)
            # –ó–∞—Ç–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)
            try:
                # image_bytes = await generate_image(result)
                if image_bytes:
                    if context and hasattr(context, 'bot'):
                        await context.bot.send_photo(chat_id=chat_id, photo=image_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–Ω—è!")
                    elif update and update.message:
                        await update.message.reply_photo(image_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–Ω—è!")
            except Exception:
                pass  # fallback: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        else:
            question = self.data.get_common_question()
            text = f"‚ùì –í–æ–ø—Ä–æ—Å –¥–Ω—è: {question}"
            if context and hasattr(context, 'bot'):
                await context.bot.send_message(chat_id=chat_id, text=text)
            elif update and update.message:
                await update.message.reply_text(text)
        self.data.increment_common_question_index()

    async def ask_mood(self, update, context):
        prompt = "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏."
        result = await generate_text(prompt, max_tokens=40)
        keyboard = [[str(i) for i in range(1, 11)]]
        text = "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10 —Å–µ–≥–æ–¥–Ω—è üòä"
        if result:
            text += f"\n{result}"
            await update.message.reply_text(text)
            try:
                # image_bytes = await generate_image(result)
                if image_bytes:
                    await update.message.reply_photo(image_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é!")
            except Exception:
                pass
        else:
            await update.message.reply_text(text)

    async def save_mood(self, update, context):
        try:
            mood = int(update.message.text)
        except Exception:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
            return
        user_id = update.effective_user.id
        from datetime import datetime
        self.db.add_mood(user_id, mood, datetime.now().isoformat())
        await update.message.reply_text(f"–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ({mood}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    async def send_compliment(self, update, context):
        prompt = "–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—ã. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏."
        result = await generate_text(prompt, max_tokens=40)
        if result:
            await update.message.reply_text(result)
            try:
                # image_bytes = await generate_image(result)
                if image_bytes:
                    await update.message.reply_photo(image_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—É!")
            except Exception:
                pass
            return
        compliment = random.choice(self.compliments)
        await update.message.reply_text(compliment) 